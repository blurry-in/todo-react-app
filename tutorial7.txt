In my previous post we cleaned up some files and made room for React to be used.

In this post we will create our first React component. Well, it is not that straight forward.
We need to configure few more things.

But...

Let's create a react component and see what happens without the required configurations. ;)


TITLE - Writing A React Component


Firstly, lets install react and react-dom.

$ npm install --save react react-dom


A React component file should have a "jsx" extension.
But in our package.json file, the lint script only scans js files. Let's update it.

  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "lint": "eslint webpack.config.js ./src ./src/**/*.jsx",
    "lint-fix": "eslint --fix webpack.config.js ./src",
    "start": "rimraf ./dist && webpack && webpack-dev-server"
  },


Okay, now we have the basic dependency to create a component.
In our src folder, create a directory called app/components. (File structure)

src
├── app
    └── components

Let's write our first component.

App.Component.jsx

import React from 'react';

export default class AppComponent extends React.Component {
  render() {
    return (
      <div>The App Component</div>
    );
  }
}

If you are not familiar with "export" "default" and stuffs, then please go through them first. Google about it. :)

Also, if you run eslint or you're using VSCode eslint extension, you'll see an eslint error saying "Component should be written as a pure function".
We will look fix this later. Let's keep things simple for now. :)

Now that we have written our first component we need to use it.

Let's put a div in our html where we want to render our component.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    <div id="root"></div>
</body>
</html>

Next, we want to render the component to the div. We will do it in our index.js.

index.js

import React from 'react';
import ReactDOM from 'react-dom';
import AppComponent from './app/components/App.Component';

ReactDOM.render(<AppComponent />, document.getElementById('root'));

Again, ignore the eslint errors for now. :)


Okay, so we have created our component and used it properly. Let's try to run it.

$ npm start

So as expected we get an error from webpack.

ERROR in ./src/index.js
Module parse failed: Unexpected token (5:16)
You may need an appropriate loader to handle this file type.
| import AppComponent from './app/components/App.Component';
|
| ReactDOM.render(<AppComponent />, document.getElementById('root'));
|

This error arises when webpack doesn't know how to deal with an imported file.
In our case we are trying to load a "jsx" file and webpack doesn't know how to compile it. Hence, the error.


Remember the required configuration we talked about earlier?
Yes, we need those now. :P

Let's see what we need.
1. jsx support.
2. Our jsx file uses es2015 features, so we need babel and some presets. (You can read about it here.)
3. We need to make our webpack use "babel". Hence we need babel-loader.

Firstly, we'll install the dependencies.

$ npm install --save-dev babel-core babel-preset-react babel-preset-es2015 babel-loader

We need to configure babel. We do that by creating a .babelrc file. (Babel automatically finds this file.)

.babelrc

{
  "presets":[
    "react",
    "es2015"
  ]
}


Here, we are just telling babel that we want to use react and es2015 presets.

Next, we need webpack to handle "jsx" files and use "babel-loader" for such files.
We do that in our webpack.config.js file.

Tell webpack to deal with jsx files. We also tell webpack what loaders to use for jsx and js files.

webpack.config.js

output: {
  filename: 'bundle.js',
  path: DIST_DIR,
},
resolve: {
  extensions: ['.js', '.jsx'],
},
module: {
  rules: [
    {
      test: [/\.jsx$/, /\.js$/],
      use: ['babel-loader'],
      exclude: [/node_modules/],
    },
  ],
},

Note: Remember to exclude node_modules folder. Also, if you didn't realize, we specify the values in Regex.

Now, that our webpack knows how to deal with jsx files. Let's run it. :)

$ npm start

Boom! You should see the "The App Component" message on the browser.

In short,
1. We created the component in a "jsx" file and used it in our index.js. Also, rendered it in our html.
2. Webpack didn't understand the "jsx" file and "es2015" syntax. So we installed babel and some presets.
3. Configured babel using .babelrc and using babel-loader we made our webpack understand stuff. :)

That's it.

Next we need to fix the eslint errors we've made.

$ npm run lint

1. index.js
  - JSX not allowed in files with extension '.js'
    This is because, we are using html syntax in the index.js file. Let's rename the file.
    Also, update the entry filename in our webpack.config.js.
      entry: `${SRC_DIR}/index.jsx`,
  - 'document' is not defined
    'document' is always defined in a browser. But, eslint doesn't know it. Remember, javascript is also used for backend
    and 'document' is unavailable there. So, we need to add these in our eslintrc.js file.

  module.exports = {
      "extends": "airbnb",
      "globals": {
        document: true,
      }
  };

2. App.Component.jsx
  - Component should be written as a pure function
    There are various ways of writing components in React.
    If the component does not maintain any state then eslint asks us to write it as a function.

    A class based component -

    export default class AppComponent extends React.Component {
      render() {
        return (
          <div>The App Component</div>
        );
      }
    }

    A functional component -

    function AppComponent() {
      return (
        <div>The App Component</div>
      );
    }

    export default AppComponent;

    Basically, functional component is just a function that returns the jsx (html).

    So, Let's rewrite our App.Component.js as a functional component. But we will use arrow function instead:

import React from 'react';

const AppComponent = () => (
  <div>The App Component</div>
);

export default AppComponent;

Let's run lint again:

$ npm run lint

All the errors should dissappear. :)

